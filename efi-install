#!/bin/bash

ME=${0##*/}

GRUB_DIR=/usr/lib/grub
MNTPNT=/mnt/$ME
EFI_DIR=/boot/efi
ID="test-mx"

usage() {
    local ret=${1:-0}

    cat <<Usage
Usage:  $ME [options] <root-partition>

Options
    -a --arch=<arch>    The architecture of the UEFI: x86_64 or i386
    -b --bits={32|64}   Convenient way to specify the architecture
    -c --clean          Unmount everything (see --noclean)
    -e --esp=<device>   The ESP partition or the drive with the ESP partition
                        (Defaults to the drive the root partition is on)
    -g -grub-dir=<dir>  Directory to find grub files (default: $GRUB_DIR)
    -h --help           Show this usage
    -i --id=<id>        The name of directory under /efi for booting
                        (default $ID)
    -m --mntpnt=<dir>   Use <dir> as the mountpoint for the root partition
                        (default $MNTPNT)
    -n --noclean        Leave everything mounted
    -p --pretend        Don't run any commands, just show them
    -v --verbose        Show commands and run them
Usage

    exit $ret
}

takes_param() {
    case $1 in
        -arch|-bits|-esp|-grub-dir|-id|-mntpnt|[abegim]) return 0 ;;
    esac
    return 1
}

eval_argument() {
    local arg=$1 val=$2
        case $arg in
                -arch|a) arch=$val     ;;
            -arch=*|a=*) arch=$val     ;;
                -bits|b) bits=$val     ;;
               -clean|c) clean=true    ;;
            -bits=*|b=*) bits=$val     ;;
                 -esp|e) esp_part=$val ;;
             -esp=*|e=*) esp_part=$val ;;
           --grub-dir|g) GRUB_DIR=$val ;;
       --grub-dir=*|g=*) GRUB_DIR=$val ;;
                -help|h) usage         ;;
                  -id|i) ID=$val       ;;
              -id=*|i=*) ID=$val       ;;
              -mntpnt|m) MNTPNT=$val   ;;
          -mntpnt=*|m=*) MNTPNT=$val   ;;
             -noclean|n) NO_CLEAN=true ;;
             -pretend|p) PRETEND=true  ;;
             -verbose|v) VERBOSE=true  ;;
 
             *) fatal "Unknown parameter %s" $(eq -$arg)
    esac
}


main() {

    [ $# -eq 0 ] && usage

    local SHORT_STACK="abcehimnpv"
    local arch bits esp_part root_part mounted clean PRETEND VERBOSE

    # Allow options before and after the command
    read_params "$@"
    shift $SHIFT

    [ $# -gt 0 ] || fatal "Expected a partition device"


    local root_part=${1#/dev/}
    shift

    # Allow options before and after the command
    read_params "$@"
    shift $SHIFT

    if [ "$clean" ]; then
        clean_up
        exit 0
    fi

    [ $# -gt 0 ]                    && fatal "Expected only one partition device. Got: %s" "$(pq $root_part $*)"
    [ $UID -ne 0 -a -z "$PRETEND" ] && fatal "This progam must be run as root (or in pretend mode)"

    local root_dev=/dev/$root_part

    check_dev $root_dev "Root partition"
    is_linux $root_dev || fatal "Root partition %s does not appear to be a Linux partition" $(eq $root_dev)

    #---- get and verify the arch
    [ ${#bits} -gt 0 -a ${#arch} -gt 0 ] && fatal "Can't specify both --bits and --arch"

    case $bits in
        "")              ;;
        32) arch=i386    ;;
        64) arch=x86_64  ;;

         *) fatal "Expected --bits=32 or --bits=64" ;;
    esac

    if [ ${#arch} -eq 0 ]; then
        local mach=$(uname -m)
        case $mach in
            x86_64) arch=$mach ;;
              i686) arch=i386   ;;
                 *) fatal "Unexpected uname -m value: %s" "$(eq $mach)" ;;
        esac
    fi

    local arch_dir=$GRUB_DIR/$arch-efi
    test -d $arch_dir || fatal "Could not find directory %s" "$(eq $arch_dir)"

    #---- Find the ESP partition to use
    : ${esp_part:=$(get_drive $root_part)}
    check_dev $esp_part "ESP partition/drive"
    local esp_drive=$(get_drive $esp_part)
    if [ "$esp_drive" = "$esp_part" ]; then
        esp_part=$(find_esp $esp_drive)
        [ ${#esp_part} -eq 0 ] && fatal "No ESP partition found on drive %s" "$(eq $esp_drive)"
    else
        check_esp $esp_part
    fi

    #---- Check the mountpoint ...
    is_mounted $MNTPNT && fail "Directory $MNTPNT is already a mountpoint"
    trap clean_up EXIT

    pretend mkdir -p $MNTPNT
    pretend mount $root_dev $MNTPNT

    pretend mount --bind /sys  $MNTPNT/sys
    pretend mount --bind /proc $MNTPNT/proc
    pretend mount --bind /dev  $MNTPNT/dev
    
    local full_efi_dir=$MNTPNT$EFI_DIR
    pretend mkdir -p $full_efi_dir
    pretend mount /dev/$esp_part $full_efi_dir

    pretend chroot $MNTPNT /usr/sbin/grub-install --target=$arch-efi --efi-directory=$EFI_DIR --boot-directory=$EFI_DIR --bootloader-id="$ID" 2>&1
    pretend chroot $MNTPNT /usr/sbin/grub-mkconfig -o /boot/efi/grub/grub.cfg 2>&1

    clean_up
    trap "" EXIT
    exit 0
}

clean_up() {
    [ "$NO_CLEAN" ] && return
    vsay "cleaning up"
    is_mounted $MNTPNT && pretend umount -R $MNTPNT
    return 0
}

is_mounted() {
    local file=$1
    cut -d" " -f2 /proc/mounts | grep -q "^$(readlink -f $file)$"
    return $?
}

check_dev() {
    local dev=/dev/${1#/dev/}  label=$2
    test -e $dev || fatal "$label %s does not exist"        "$(eq $dev)"
    test -b $dev || fatal "$label %s is not a block device" "$(eq $dev)"
}

check_esp() {
    local dev=/dev/${1#/dev/}
    echo check_esp $dev
    check_dev $dev "ESP partition"
    local expr="(c12a7328-f81f-11d2-ba4b-00a0c93ec93b|0xef)$"
    lsblk --nodeps --noheadings --list --output name,parttype $dev | egrep -q "$expr" \
        || fatal "%s is not an ESP partition" "$(eq $dev)"
}


find_esp() {
    local dev=/dev/${1#/dev/}

    local drive=$(get_drive $dev)
    [ ${#drive} -gt 0 ] || fatal "No root device name found"
    test -b /dev/$drive || fatal "Root device %s not found" "$(eq /dev/$drive)"

    local expr="(c12a7328-f81f-11d2-ba4b-00a0c93ec93b|0xef)$"
    lsblk -nlo name,parttype /dev/$drive | egrep "$expr" | head -n1 | awk '{print $1}'
}

is_linux() {
    local drive=${1#/dev/}

    [ ${#drive} -gt 0 ]       || fatal "No device given to is_linux"
    [ -z "${drive%%*[0-9]}" ] || fatal "is-linux only works on partitions"

    local dev=/dev/$drive

    check_dev $dev "Root partition"

    local FSTYPE PARTTYPE
    eval $(lsblk -Pno fstype,parttype $dev)

    # See: http://sourceforge.net/p/gptfdisk/code/ci/master/tree/parttypes.cc
    case $PARTTYPE in

        # Linux data
        0x83|0fc63daf-8483-4772-8e79-3d69d8477de4) success ;;
        # Linux swap
        0x82|0657fd6d-a4ab-43c4-84e5-0933c84b4f4f) success ;;
             # Linux /home
             933ac7e1-2eb4-4f13-b844-0e14e2aef915) success ;;
             # Linux /root x86
             44479540-f297-41b2-9af7-d131d5f0458a) success ;;
             # Linux /root x86-64
             4f68bce3-e8cd-4db1-96e7-fbcaf984b709) success ;;
          # No part-type or Windows data
          ""|ebd0a0a2-b9e5-4433-87c0-68b6b72699c7)         ;;
                                                *) failure ;;
    esac

    case $FSTYPE in
        btrfs|ext2|ext3|ext4|jfs|nilfs2) success ;;
               reiser4|reiserfs|ufs|xfs) success ;;
                                      *) failure ;;
    esac
}

success() { return 0; }
failure() { return 1; }

do_drives() {

    local dev_width=$(get_dev_width $MAJOR_ARG --nodeps)

    case $TAB_DELIMIT:$FULL_FIELDS in
        true:true) format="%s\t%s\t%s\t%s\t%s\t%s\t%s"                    ;;
            :true) format="%-${dev_width}s %6s  %6s  %10s  %5s  %16s  %s" ;;
            true:) format="%s\t%s\t%s"                                    ;;
                :) format="%-${dev_width}s %6s %s"                        ;;
    esac

    local fields="Name Size Model"
    [ "$FULL_FIELDS" ] && fields="Name Size Rotate USB/Remove Parts Model Labels"
    [ "$SHOW_HEADER" ] && printf "$format\n" $fields

    local line remove rotate
    local NAME SIZE MODEL RM ROTA
    while read line; do

        # Note that lsblk escapes double-quotes and dollar signs when --pairs
        # is used which makes doing the eval safe
        eval "$line"

        local dev=/dev/$NAME

        greater_than_min_size $NAME || continue

        contains_boot_partition $dev && continue

        case $RM in
            0) remove=no  ;;
            1) remove=yes ;;
            *) remove="?" ;;
        esac

        is_usb $NAME && remove=yes

        # The ROTA (rotational field) failed (was true) for my sandisk cruzer usb
        # so I use "?" for all removable drives.
        case $RM$ROTA in
            00) rotate=no  ;;
            01) rotate=yes ;;
             *) rotate="?" ;;
        esac

        local pcnt=$(count_partitions $dev)
        local labels=$(all_labels     $dev)

        if [ "$FULL_FIELDS" ]; then
            printf "$format\n" "$DEV_OUTPUT$NAME" "$SIZE" "$rotate" "$remove" "$pcnt" "$MODEL" "$labels"
        else
            printf "$format\n" "$DEV_OUTPUT$NAME" "$SIZE" "$MODEL"
        fi

    done <<Do_Drives
$(lsblk $MAJOR_ARG $DRIVE_ARGS --output $DRIVE_FIELDS)
Do_Drives
}

do_all_parts() {
   _do_parts ""
}

do_parts() {
    local drive=${1#/dev/}
    local dev=/dev/$drive

    check_dev $dev "Partition"

    _do_parts $dev
}

_do_parts() {
    local the_dev=$1

    [ "$ONLY_SWAP" ]  && EX_SWAP=

    local dev_width=$(get_dev_width $MAJOR_ARG $the_dev)
    local  fs_width=$(get_field_width fstype -n $MAJOR_ARG $the_dev)

    local format lablab
    if [ "$TAB_DELIMIT" ]; then
        format="%s\t%s\t%s\t%s"
        lablab="Label"
    else
        format="%-${dev_width}s - %6s - %-${fs_width}s%s"
        lablab=" - Label"
    fi

    [ "$SHOW_HEADER" ] && printf "$format\n" Name Size FS "$lablab" | sed 's/ - /   /g'

    local NAME SIZE FSTYPE PARTTYPE TYPE LABEL
    while read line; do
        [ ${#line} -gt 0 -a -z "${line##NAME=*}" ] || continue

        # Note that lsblk escapes double-quotes and dollar signs when --pairs
        # is used which makes doing the eval safe
        eval "$line"

        #echo "$line"; #continue

        [ "$TYPE" = "disk" ] && continue

        # Ignore extended boot record partitions
        case $PARTTYPE in 0xf) continue;; esac

        [ "$ONLY_SWAP" -a "$FSTYPE" != "swap" ] && continue

        case $FSTYPE:$EX_SWAP in swap:true) continue ;; esac
        case $FSTYPE          in   iso9660) continue ;; esac

        [ -n "$BOOT_UUID" -a "$BOOT_UUID" = "$UUID" ] && continue

        # EFI/Win can't be excluded if the PARTTYPE is empty
        [ "$EX_EFI" ] || PARTTYPE=""

        # See:
        # https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
        # for GPT ids below
        case $PARTTYPE in
            0xc|0x27|0xef)                        continue ;;
            # GPT EFI partition
            c12a7328-f81f-11d2-ba4b-00a0c93ec93b) continue ;;
            # GPT Microsoft reserved partition
            e3c9e316-0b5c-4db8-817d-f92df00215ae) continue ;;
            # GPT Windows Recovery Environment
            de94bba4-06d1-4d40-a16a-bfd50179d6ac) continue ;;
        esac

        greater_than_min_size $NAME || continue

        if [ "$SIMPLIFY" ]; then
            case $FSTYPE in
                ntfs-3g) FSTYPE=NTFS  ;;
                   vfat) FSTYPE=Fat32 ;;  # ???
                hfsplus) FSTYPE=HPFS  ;;
            esac
        fi
        # This is slower but it preserves special chars in labels
        local label=$(lsblk /dev/$NAME -no label)
        [ -n "$label" -a -z "$TAB_DELIMIT" ] && label=" - $label"
        printf "$format" "$DEV_OUTPUT$NAME" "$SIZE" "$FSTYPE" "$label"
        echo
    done<<Lsblk
$(lsblk $MAJOR_ARG $LSBLK_ARGS --output $PARTS_FIELDS $the_dev)
Lsblk
}

get_drive() {
    local drive part=${1##*/}
    case $part in
        mmcblk*) echo ${part%p[0-9]}                        ;;
              *) drive=${part%[0-9]}  ; echo ${drive%[0-9]} ;;
    esac
}

get_size() {
    local part=${1##*/}
    local drive=$(get_drive $part)
    local path=$drive
    [ "$drive" != "$part" ] && path=$drive/$part
    local file=/sys/block/$path/size
    test -r $file && cat $file
}

is_usb() {
    local part=${1##*/}
    local drive=$(get_drive $part)
    local dir=/sys/block/$drive
    local devpath=$(readlink -f $dir/device)
    [ "$devpath" ] || return 1
    echo $devpath | grep -q /usb
    return $?
}

contains_boot_partition() {
    local dev=$1
    [ -z "$BOOT_UUID" ] && return 1
    lsblk -no uuid $dev | grep -q "^$BOOT_UUID$"
    return $?
}

greater_than_min_size() {
    local dev=$1
    [ -z "$MIN_SIZE" ] && return 0
    local raw_size=$(get_size $dev)
    [ -z "$raw_size" ] && return 1
    [ $((raw_size / 2 / 1024)) -gt $MIN_SIZE ]
    return $?
}

count_partitions() {
    local drive=$1
    lsblk -no parttype $drive | grep . | grep -v "^0xf$" | wc -l
}

all_mountpoints() {
    local drive=$1
    local mps=$(lsblk -no mountpoint $drive | grep -v "^\[")
    echo $mps
}

get_field_width() {
    local name=$1  field fwidth width=0
    shift
    while read field; do

        if [ "$SIMPLIFY" -a "$name" = fstype ]; then
            case $field in
                ntfs-3g) field=NTFS  ;;
                   vfat) field=Fat32 ;;  # ???
                hfsplus) field=HPFS  ;;
            esac
        fi
        fwidth=${#field}
        [ $width -lt $fwidth ] && width=$fwidth
    done<<Get_Field_Width
$(lsblk --output $name --list $*)
Get_Field_Width
    echo $width
}

get_dev_width() {
    local width=$(get_field_width name $*)
    [ "$DEV_OUTPUT" ] && width=$((width + ${#DEV_OUTPUT}))
    echo $width
}


all_labels() {
    local drive=$1
    local labels=$(lsblk -no label $drive | sed -r '/./ s/^|$/"/g')
    echo $labels
}

fatal() {
    local fmt=$1
    shift
    printf "$ME fatal error: $fmt\n" "$@" >&2
    exit 2
}

vsay() {
    [ "$VERBOSE" -o "$PRETEND" ] && echo "$*"
}

pretend() {
    if [ "$PRETEND" ]; then
        echo "pretend: $@"
    elif [ "$VERBOSE" ]; then
        echo "$cyan$@$nc"
    fi

    [ -z "$PRETEND" ] && "$@"
}

#-------------------------------------------------------------------------------
# Send "$@".  Expects
#
#   SHORT_STACK               variable, list of single chars that stack
#   fatal(msg)                routine,  fatal("error message")
#   takes_param(arg)          routine,  true if arg takes a value
#   eval_argument(arg, [val]) routine,  do whatever you want with $arg and $val
#
# Sets "global" variable SHIFT to the number of arguments that have been read.
#-------------------------------------------------------------------------------
read_params() {
    # Most of this code is boiler-plate for parsing cmdline args
    SHIFT=0
    # These are the single-char options that can stack

    local arg val

    # Loop through the cmdline args
    while [ $# -gt 0 -a ${#1} -gt 0 -a -z "${1##-*}" ]; do
        arg=${1#-}
        shift
        SHIFT=$((SHIFT + 1))

        # Expand stacked single-char arguments
        case $arg in
            [$SHORT_STACK][$SHORT_STACK]*)
                if echo "$arg" | grep -q "^[$SHORT_STACK]\+$"; then
                    local old_cnt=$#
                    set -- $(echo $arg | sed -r 's/([a-zA-Z])/ -\1 /g') "$@"
                    SHIFT=$((SHIFT - $# + old_cnt))
                    continue
                fi;;
        esac

        # Deal with all options that take a parameter
        if takes_param "$arg"; then
            [ $# -lt 1 ] && fatal "Expected a parameter after: -$arg"
            val=$1
            [ -n "$val" -a -z "${val##-*}" ] \
                && fatal "Suspicious argument after -$arg: $val"
            SHIFT=$((SHIFT + 1))
            shift
        else
            case $arg in
                *=*)  val=${arg#*=} ;;
                  *)  val="???"     ;;
            esac
        fi

        eval_argument "$arg" "$val"
    done
}

set_color() {
    local  e=$(printf "\e")
      black="$e[0;30m";     blue="$e[0;34m";      green="$e[0;32m";
       cyan="$e[0;36m";      red="$e[0;31m";     purple="$e[0;35m";
      brown="$e[0;33m";  lt_gray="$e[0;37m";    dk_gray="$e[1;30m";
    lt_blue="$e[1;34m"; lt_green="$e[1;32m";    lt_cyan="$e[1;36m";
     lt_red="$e[1;31m";  magenta="$e[1;35m";     yellow="$e[1;33m";
      white="$e[1;37m";  rev_red="$e[0;7;31m";       nc="$e[0m";
        rev="$e[7m";  under_line="$e[4m";          bold="$e[1m"

      say_co=$lt_cyan
    title_co=$lt_cyan
      ask_co=$lt_green
     warn_co=$yellow
      err_co=$red
}

eq() { echo "$warn_co$*$err_co" ;}

set_color

# Evaluate redirects RIGHT TO LEFT:
#
#  stdout  1 -------.         .----- sed, tee ---> screen
#                    \       /
#  stderr  2 ---.     `---- / -------------------> screen
#                \         /
#         17      `-------'

main "$@" 17>&1 1>&2 2>&17 | while read line; do printf "%s\n" "$line" \
    | sed -e "/^$/d" -e "s/^/${warn_co}Error: $err_co/" -e "s/$/$nc/" \
    | tee -a $log_file; done

exit 0
